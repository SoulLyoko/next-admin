// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider           = "zod-prisma-types"
    output             = "./zod"
    useMultipleFiles   = true
    createInputTypes   = false
    createPartialTypes = true
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id        String         @id @default(cuid())
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    createdBy String?
    updatedBy String?
    name      String?
    email     String?
    password  String?
    accounts  Account[]
    sessions  Session[]
    posts     PostsOnUsers[]
    roles     RolesOnUsers[]
    depts     DeptsOnUsers[]
}

model Post {
    id        String         @id @default(cuid())
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    createdBy String?
    updatedBy String?
    name      String?
    users     PostsOnUsers[]

    @@index([name])
}

model PostsOnUsers {
    post   Post   @relation(fields: [postId], references: [id])
    postId String // relation scalar field (used in the `@relation` attribute above)
    user   User   @relation(fields: [userId], references: [id])
    userId String // relation scalar field (used in the `@relation` attribute above)

    @@id([postId, userId])
}

model Role {
    id        String         @id @default(cuid())
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    createdBy String?
    updatedBy String?
    name      String?
    users     RolesOnUsers[]
    menus     MenusOnRoles[]

    @@index([name])
}

model RolesOnUsers {
    role   Role   @relation(fields: [roleId], references: [id])
    roleId String // relation scalar field (used in the `@relation` attribute above)
    user   User   @relation(fields: [userId], references: [id])
    userId String // relation scalar field (used in the `@relation` attribute above)

    @@id([roleId, userId])
}

model Dept {
    id        String         @id @default(cuid())
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    createdBy String?
    updatedBy String?
    name      String?
    parentId  String?
    parent    Dept?          @relation("DeptTree", fields: [parentId], references: [id])
    children  Dept[]         @relation("DeptTree")
    users     DeptsOnUsers[]
}

model DeptsOnUsers {
    dept   Dept   @relation(fields: [deptId], references: [id])
    deptId String // relation scalar field (used in the `@relation` attribute above)
    user   User   @relation(fields: [userId], references: [id])
    userId String // relation scalar field (used in the `@relation` attribute above)

    @@id([deptId, userId])
}

model Menu {
    id        String         @id @default(cuid())
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    createdBy String?
    updatedBy String?
    icon      String?
    name      String?
    path      String?
    parentId  String?
    parent    Menu?          @relation("MenuTree", fields: [parentId], references: [id])
    children  Menu[]         @relation("MenuTree")
    roles     MenusOnRoles[]
}

model MenusOnRoles {
    menu   Menu   @relation(fields: [menuId], references: [id])
    menuId String // relation scalar field (used in the `@relation` attribute above)
    role   Role   @relation(fields: [roleId], references: [id])
    roleId String // relation scalar field (used in the `@relation` attribute above)

    @@id([menuId, roleId])
}
