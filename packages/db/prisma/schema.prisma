// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// https://github.com/chrishoermann/zod-prisma-types
generator zod {
    provider                  = "zod-prisma-types"
    output                    = "./zod"
    useMultipleFiles          = true
    createInputTypes          = false
    createPartialTypes        = true
    createRelationValuesTypes = true
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

/// 用户
model User {
    id            String    @id @default(cuid())
    /// 生日
    birthday      DateTime?
    /// 邮箱
    email         String?   @unique
    /// 邮箱验证时间
    emailVerified DateTime?
    /// 头像
    image         String?
    /// 用户名
    name          String?
    /// 姓名
    nickname      String?
    /// 密码
    password      String?
    /// 手机号
    phone         String?
    /// 备注
    remark        String?
    /// 性别
    sex           String?
    /// 排序
    sort          Int?
    /// 状态
    status        String?

    accounts Account[]
    sessions Session[]
    posts    PostsOnUsers[]
    roles    RolesOnUsers[]
    depts    DeptsOnUsers[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String?
    updatedBy String?
    deleted   Boolean  @default(false)
}

/// 岗位
model Post {
    id     String  @id @default(cuid())
    /// 岗位名称
    name   String?
    /// 备注
    remark String?
    /// 排序
    sort   Int?

    users PostsOnUsers[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String?
    updatedBy String?
    deleted   Boolean  @default(false)

    @@index([name])
}

model PostsOnUsers {
    post   Post   @relation(fields: [postId], references: [id])
    postId String
    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@id([postId, userId])
}

/// 角色
model Role {
    id     String  @id @default(cuid())
    /// 角色标识
    key    String? @unique
    /// 角色名称
    name   String?
    /// 备注
    remark String?
    /// 排序
    sort   Int?

    users RolesOnUsers[]
    menus MenusOnRoles[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String?
    updatedBy String?
    deleted   Boolean  @default(false)

    @@index([name])
}

model RolesOnUsers {
    role   Role   @relation(fields: [roleId], references: [id])
    roleId String
    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@id([roleId, userId])
}

/// 部门
model Dept {
    id     String  @id @default(cuid())
    /// 部门名称
    name   String?
    /// 备注
    remark String?
    /// 排序
    sort   Int?

    parentId String?
    parent   Dept?   @relation("DeptTree", fields: [parentId], references: [id])
    children Dept[]  @relation("DeptTree")

    users DeptsOnUsers[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String?
    updatedBy String?
    deleted   Boolean  @default(false)
}

model DeptsOnUsers {
    dept   Dept   @relation(fields: [deptId], references: [id])
    deptId String
    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@id([deptId, userId])
}

/// 菜单
model Menu {
    id     String  @id @default(cuid())
    /// 图标
    icon   String?
    /// 菜单名称
    name   String?
    /// 路由路径
    path   String?
    /// 备注
    remark String?
    /// 排序
    sort   Int?
    /// 状态
    status String?

    parentId String?
    parent   Menu?   @relation("MenuTree", fields: [parentId], references: [id])
    children Menu[]  @relation("MenuTree")

    roles MenusOnRoles[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String?
    updatedBy String?
    deleted   Boolean  @default(false)
}

model MenusOnRoles {
    menu   Menu   @relation(fields: [menuId], references: [id])
    menuId String
    role   Role   @relation(fields: [roleId], references: [id])
    roleId String

    @@id([menuId, roleId])
}

/// 字典
model Dict {
    id     String  @id @default(cuid())
    /// 字典名
    label  String?
    /// 备注
    remark String?
    /// 排序
    sort   Int?
    /// 状态
    status String?
    /// 字典值
    value  String

    parentId String?
    parent   Dict?   @relation("DictTree", fields: [parentId], references: [id])
    children Dict[]  @relation("DictTree")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String?
    updatedBy String?
    deleted   Boolean  @default(false)
}

/// 日志
model Log {
    id      String   @id @default(cuid())
    /// 耗时
    time    Int?
    /// 类型
    type    String?
    /// 请求路径
    path    String?
    /// 请求参数
    input   String?
    /// 请求头
    headers String?
    /// 是否成功
    ok      Boolean?
    /// 错误信息
    error   String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String?
    updatedBy String?
    deleted   Boolean  @default(false)
}
